// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpczip.proto

/*
Package grpczip is a generated protocol buffer package.

It is generated from these files:
	grpczip.proto

It has these top-level messages:
	File
	Request
	Response
*/
package grpczip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type File struct {
	Filename string `protobuf:"bytes,1,opt,name=Filename" json:"Filename,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *File) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Request struct {
	Id    string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Files []*File `protobuf:"bytes,2,rep,name=Files" json:"Files,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Request) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type Response struct {
	Id      string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Zipfile *File  `protobuf:"bytes,2,opt,name=Zipfile" json:"Zipfile,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Response) GetZipfile() *File {
	if m != nil {
		return m.Zipfile
	}
	return nil
}

func init() {
	proto.RegisterType((*File)(nil), "grpczip.File")
	proto.RegisterType((*Request)(nil), "grpczip.Request")
	proto.RegisterType((*Response)(nil), "grpczip.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grpczip service

type GrpczipClient interface {
	Grpczip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type grpczipClient struct {
	cc *grpc.ClientConn
}

func NewGrpczipClient(cc *grpc.ClientConn) GrpczipClient {
	return &grpczipClient{cc}
}

func (c *grpczipClient) Grpczip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/grpczip.Grpczip/Grpczip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpczip service

type GrpczipServer interface {
	Grpczip(context.Context, *Request) (*Response, error)
}

func RegisterGrpczipServer(s *grpc.Server, srv GrpczipServer) {
	s.RegisterService(&_Grpczip_serviceDesc, srv)
}

func _Grpczip_Grpczip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpczipServer).Grpczip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpczip.Grpczip/Grpczip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpczipServer).Grpczip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpczip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpczip.Grpczip",
	HandlerType: (*GrpczipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grpczip",
			Handler:    _Grpczip_Grpczip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpczip.proto",
}

func init() { proto.RegisterFile("grpczip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2f, 0x2a, 0x48,
	0xae, 0xca, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xcc, 0xb8,
	0x58, 0xdc, 0x32, 0x73, 0x52, 0x85, 0xa4, 0xb8, 0x38, 0x40, 0x74, 0x5e, 0x62, 0x6e, 0xaa, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0x24, 0xc4, 0xc5, 0xe2, 0x92, 0x58, 0x92, 0x28,
	0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0x66, 0x2b, 0xd9, 0x71, 0xb1, 0x07, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x08, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x40, 0x35, 0x31, 0x79, 0xa6, 0x08, 0x29,
	0x73, 0xb1, 0x82, 0xb4, 0x16, 0x4b, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x1b, 0xf1, 0xea, 0xc1, 0xac,
	0x06, 0x89, 0x06, 0x41, 0xe4, 0x94, 0x9c, 0xb9, 0x38, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x31, 0x0c, 0x50, 0xe7, 0x62, 0x8f, 0xca, 0x2c, 0x48, 0xcb, 0xcc, 0x49, 0x05, 0x5b, 0x89,
	0x61, 0x04, 0x4c, 0xd6, 0xc8, 0x9a, 0x8b, 0xdd, 0x1d, 0x22, 0x21, 0x64, 0x80, 0x60, 0x0a, 0xc0,
	0x55, 0x43, 0x5d, 0x28, 0x25, 0x88, 0x24, 0x02, 0xb1, 0x53, 0x89, 0xc1, 0x49, 0x3a, 0x4a, 0x32,
	0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x38, 0x31, 0x3d, 0xdf, 0xd8,
	0x54, 0x1f, 0xaa, 0x2e, 0x89, 0x0d, 0x1c, 0x4c, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b,
	0x1e, 0xc9, 0x31, 0x37, 0x01, 0x00, 0x00,
}
